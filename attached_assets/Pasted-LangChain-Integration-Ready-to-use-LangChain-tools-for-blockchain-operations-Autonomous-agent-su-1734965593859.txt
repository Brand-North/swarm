LangChain Integration

Ready-to-use LangChain tools for blockchain operations
Autonomous agent support with React framework
Memory management for persistent interactions
Streaming responses for real-time feedback
Autonomous Modes

Interactive chat mode for guided operations
Autonomous mode for independent agent actions
Configurable action intervals
Built-in error handling and recovery
AI Tools

DALL-E integration for NFT artwork generation
Natural language processing for blockchain commands
Price feed integration for market analysis
Automated decision-making capabilities
ðŸ“¦ Installation
npm install solana-agent-kit
Quick Start
import { SolanaAgentKit, createSolanaTools } from "solana-agent-kit";

// Initialize with private key and optional RPC URL
const agent = new SolanaAgentKit(
  "your-wallet-private-key-as-base58",
  "https://api.mainnet-beta.solana.com",
  "your-openai-api-key"
);

// Create LangChain tools
const tools = createSolanaTools(agent);
Usage Examples
Deploy a New Token
const result = await agent.deployToken(
  "my ai token", // name
  "uri", // uri
  "token", // symbol
  9, // decimals
  1000000 // initial supply
);

console.log("Token Mint Address:", result.mint.toString());
Create NFT Collection
const collection = await agent.deployCollection({
  name: "My NFT Collection",
  uri: "https://arweave.net/metadata.json",
  royaltyBasisPoints: 500, // 5%
  creators: [
    {
      address: "creator-wallet-address",
      percentage: 100,
    },
  ],
});
Swap Tokens
import { PublicKey } from "@solana/web3.js";

const signature = await agent.trade(
  new PublicKey("target-token-mint"),
  100, // amount
  new PublicKey("source-token-mint"),
  300 // 3% slippage
);
Lend Tokens
import { PublicKey } from "@solana/web3.js";

const signature = await agent.lendAssets(
  100 // amount of USDC to lend
);
Stake SOL
const signature = await agent.stake(
  1 // amount in SOL to stake
);
Send an SPL Token Airdrop via ZK Compression
import { PublicKey } from "@solana/web3.js";

(async () => {
  console.log(
    "~Airdrop cost estimate:",
    getAirdropCostEstimate(
      1000, // recipients
      30_000 // priority fee in lamports
    )
  );

  const signature = await agent.sendCompressedAirdrop(
    new PublicKey("JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN"), // mint
    42, // amount per recipient
    [
      new PublicKey("1nc1nerator11111111111111111111111111111111"),
      // ... add more recipients
    ],
    30_000 // priority fee in lamports
  );
})();
Fetch Price Data from Pyth
import { pythFetchPrice } from "solana-agent-kit";

const price = await pythFetchPrice(
  agent,
  "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43"
);

console.log("Price in BTC/USD:", price);